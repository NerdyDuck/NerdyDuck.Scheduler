<#
/*******************************************************************************
 * <copyright file="Package.tt" owner="Daniel Kopp">
 * Copyright 2015-2016 Daniel Kopp
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * </copyright>
 * <author name="Daniel Kopp" email="dak@nerdyduck.de" />
 * <file name="Package.tt" date="2016-03-10">
 * Creates a Package.nuspec file to create a NuGet package that contains
 * libraries for both full .NET Framework 4.6 and UWP..
 * </file>
 ******************************************************************************/
#>
<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ output extension=".nuspec" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml" #>
<#
DirectoryInfo SolutionFolder = new DirectoryInfo(RemoveTrailingSlash(Host.ResolveParameterValue("", "", "SolutionFolder")));
DirectoryInfo DeployProjectFolder = new DirectoryInfo(RemoveTrailingSlash(Host.ResolveParameterValue("", "", "DeployProjectFolder")));
DirectoryInfo DesktopProjectFolder = new FileInfo(Host.ResolveParameterValue("", "", "DesktopProject")).Directory;
DirectoryInfo UniversalProjectFolder = new FileInfo(Host.ResolveParameterValue("", "", "UniversalProject")).Directory;
DirectoryInfo FileSourceFolder = new DirectoryInfo(RemoveTrailingSlash(Host.ResolveParameterValue("", "", "FileSourceFolder")));
string ContentFilesString = Host.ResolveParameterValue("", "", "ContentFilesSourceFolder");
DirectoryInfo ContentFilesSourceFolder = null;
if (!string.IsNullOrWhiteSpace(ContentFilesString))
	ContentFilesSourceFolder = new DirectoryInfo(RemoveTrailingSlash(ContentFilesString));
string MetaFileName = Host.ResolveParameterValue("", "", "MetaFileName");
string PackageName = Host.ResolveParameterValue("", "", "PackageName");
string PackageVersion = Host.ResolveParameterValue("", "", "PackageVersion");

DirectoryInfo DesktopAnyFolder = new DirectoryInfo(Path.Combine(FileSourceFolder.FullName, "net46"));
DirectoryInfo UniversalAnyFolder = new DirectoryInfo(Path.Combine(FileSourceFolder.FullName, @"uap10.0\anyCPU"));
DirectoryInfo UniversalARMFolder = new DirectoryInfo(Path.Combine(FileSourceFolder.FullName, @"uap10.0\arm"));
DirectoryInfo Universalx64Folder = new DirectoryInfo(Path.Combine(FileSourceFolder.FullName, @"uap10.0\x64"));
DirectoryInfo Universalx86Folder = new DirectoryInfo(Path.Combine(FileSourceFolder.FullName, @"uap10.0\x86"));

List<FileInfo> DesktopAnyFiles = GetOutputFiles(DesktopAnyFolder);
List<FileInfo> UniversalAnyFiles = GetOutputFiles(UniversalAnyFolder);
List<FileInfo> UniversalARMFiles = GetOutputFiles(UniversalARMFolder);
List<FileInfo> Universalx64Files = GetOutputFiles(Universalx64Folder);
List<FileInfo> Universalx86Files = GetOutputFiles(Universalx86Folder);
#>
<?xml version="1.0" encoding="utf-8" ?>
<package xmlns="http://schemas.microsoft.com/packaging/2010/07/nuspec.xsd">
<#
	if (File.Exists(MetaFileName))
	{
		using (XmlReader reader = XmlReader.Create(File.OpenRead(MetaFileName)))
		{
			if (reader.ReadToDescendant("metadata"))
			{
				string MetaDataContent = reader.ReadOuterXml();
				MetaDataContent = MetaDataContent.Replace("$id$", PackageName);
				MetaDataContent = MetaDataContent.Replace("$version$", PackageVersion);
				WriteLine("\t" + MetaDataContent);
			}
		}
	}
#>
	<files>
<#
		if (ContentFilesSourceFolder != null)
		{
			WriteContentFilesElement(ContentFilesSourceFolder, DeployProjectFolder);
			WriteLine("");
		}
#>
		<!-- Dummy file to mark package usable for UAP also in VS package manager (actual targeting for UAP must be done using the ref and runtimes folders) -->
<#
		FileInfo XmlDocFile = UniversalAnyFiles.Where(f => f.Extension.ToLower() == ".xml" && !f.Name.EndsWith(".rd.xml")).First();
		WriteFileElement(XmlDocFile, @"lib\uap10.0\", DeployProjectFolder, UniversalAnyFolder);
#>

		<!-- Simple Txm for .Net 4.5 desktop version-->
<#
		foreach (FileInfo info in DesktopAnyFiles)
		{
			WriteFileElement(info, @"lib\net46\", DeployProjectFolder, DesktopAnyFolder);
		}
#>

		<!-- Reference files for UAP design-time -->
<#
		foreach (FileInfo info in UniversalAnyFiles)
		{
			WriteFileElement(info, @"ref\uap10.0\", DeployProjectFolder, UniversalAnyFolder);
		}
#>

		<!-- Platform-specific files for UAP compile-time and run-time -->
<#
		foreach (FileInfo info in UniversalARMFiles)
		{
			WriteFileElement(info, @"runtimes\win10-arm\lib\uap10.0\", DeployProjectFolder, UniversalARMFolder);
		}
		foreach (FileInfo info in Universalx64Files)
		{
			WriteFileElement(info, @"runtimes\win10-x64\lib\uap10.0\", DeployProjectFolder, Universalx64Folder);
		}
		foreach (FileInfo info in Universalx86Files)
		{
			WriteFileElement(info, @"runtimes\win10-x86\lib\uap10.0\", DeployProjectFolder, Universalx86Folder);
		}
#>

		<!-- Source files for the symbols package -->
<#
		WriteSourceElement(DesktopProjectFolder, DeployProjectFolder, SolutionFolder);
		WriteSourceElement(UniversalProjectFolder, DeployProjectFolder, SolutionFolder);
#>
	</files>
</package>
<#+
	private List<FileInfo> GetOutputFiles(DirectoryInfo sourceDirectory)
	{
		return sourceDirectory.GetFiles("*", SearchOption.AllDirectories).ToList();
	}

	private void WriteFileElement(FileInfo file, string targetPath, DirectoryInfo projectFolder, DirectoryInfo fileSourceFolder)
	{
		string FileRelPath = GetRelativePath(projectFolder.FullName + "\\", file.FullName);
		string SubFolders = GetRelativePath(fileSourceFolder, file.Directory);
		if (!string.IsNullOrEmpty(SubFolders) && !SubFolders.EndsWith("\\"))
		{
			SubFolders += "\\";
		}

		WriteLine(string.Format("\t\t<file src=\"{0}\" target=\"{1}{2}\" />", FileRelPath, targetPath, SubFolders));
	}

	private void WriteContentFilesElement(DirectoryInfo contentFilesFolder, DirectoryInfo projectFolder)
	{
		string FileRelPath = GetRelativePath(projectFolder, contentFilesFolder);
		WriteLine(string.Format("\t\t<file src=\"{0}\\**\\*\" target=\"contentFiles\\\" />", FileRelPath));
	}

	private void WriteSourceElement(DirectoryInfo sourceProjectFolder, DirectoryInfo projectFolder, DirectoryInfo solutionFolder)
	{
		string RelPathToProject = GetRelativePath(projectFolder, sourceProjectFolder);
		string RelPathToSolution = sourceProjectFolder.FullName.Substring(solutionFolder.FullName.Length) + "\\";
		WriteLine(string.Format("\t\t<file src=\"{0}\\**\\*.cs\" exclude=\"{0}\\obj\\**\\*.cs\" target=\"{1}\" />", RelPathToProject, RelPathToSolution));
	}

	private string GetRelativePath(string basePath, string targetPath)
	{
		Uri BaseUri = new Uri(basePath, UriKind.Absolute);
		Uri TargetUri = new Uri(targetPath, UriKind.Absolute);
		Uri RelativeUri = BaseUri.MakeRelativeUri(TargetUri);
		return RemoveTrailingSlash(RelativeUri.OriginalString.Replace('/', '\\'));
	}

	private string GetRelativePath(DirectoryInfo basePath, DirectoryInfo targetPath)
	{
		string baseString = basePath.FullName;
		if (!baseString.EndsWith("\\"))
			baseString += "\\";
		string targetString = targetPath.FullName;
		if (!targetString.EndsWith("\\"))
			targetString += "\\";
		return GetRelativePath(baseString, targetString);
	}

	private string RemoveTrailingSlash(string path)
	{
		if (string.IsNullOrEmpty(path))
			return path;

		while (path.EndsWith("\\"))
		{
			path = path.Remove(path.Length - 1, 1);
		}

		return path;
	}
#>
