<?xml version="1.0" encoding="utf-8"?>

<!--
*******************************************************************************
  <copyright file="SignAssembly.targets" owner="Daniel Kopp">
  Copyright 2015-2016 Daniel Kopp

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  </copyright>
  <author name="Daniel Kopp" email="dak@nerdyduck.de" />
  <file name="SignAssembly.targets" date="2016-03-09">
  MSBuild target file to sign the output of a compilation with a Software
  Publisher Certificate (SPC).
  </file>
******************************************************************************
-->

<!--
*******************************************************************************
  Prerequisites:
  - Signs all .exes and .dlls in the output with the same name as the
    TargetName property.
  - Uses the signtool.exe tool from the Microsoft SDK (make sure you installed
    it with Visual Studio)
  - The task assumes that you have a valid x.501 certificate in your Windows
    certificate store that has the Code Signing extended usage
    (OID 1.3.6.1.5.5.7.3.3).
  Usage:
  - Put an Import statement into your project file (towards the end of the file).
  - Add the SignAssemblies property in a PropertyGroup and set it to true.
  - If you want to sign the output only on a release build, set an appropriate
    condition on the SignAssemblies property (see below).
  - If you want to use a different version of signtool.exe, set the property
    SignToolExePath to the path of the executable.
  - If you want to use a different hashing algorithm than SHA256, set the
    SignHashAlgorithm property to the hash algorithm you want.
  - If you want to use a different timestamp server than the one from
  - StartSSL.com set the TimestampServerUrl property to the URL of a different
    RFC 3161-compatible timestamp server.

  Example:

  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <SignAssemblies>true</SignAssemblies>
    The following are optional:
    <SignToolExePath>c:\MyPath\signtool.exe</SignToolExePath>
    <SignHashAlgorithm>sha1</SignHashAlgorithm>
    <TimestampServerUrl>http://www.contoso.com/timestamp</TimestampServerUrl>
  </PropertyGroup>
  <Import Project="SignAssembly.targets"/>

******************************************************************************/
-->

<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <SignAssemblies Condition=" '$(SignAssemblies)'=='' ">false</SignAssemblies>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(SignAssemblies)'=='true' ">
    <!-- Get installation path of Windows SDK 7.1A, because it contains signtool.exe -->
    <WinSDK71Path>$(registry:HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Microsoft SDKs\Windows\v7.1A@InstallationFolder)</WinSDK71Path>
    <SignToolExePath Condition=" '$(SignToolExePath)'=='' ">$(WinSDK71Path)bin\signtool.exe</SignToolExePath>
    <SignHashAlgorithm Condition=" '$(SignHashAlgorithm)'=='' ">sha256</SignHashAlgorithm>
    <TimestampServerUrl Condition=" '$(TimestampServerUrl)'=='' ">http://tsa.startssl.com/rfc3161</TimestampServerUrl>
  </PropertyGroup>

  <Target Name="SignAssemblies" Condition=" '$(SignAssemblies)'=='true' " BeforeTargets="AfterBuild">
    <Error Text="Failed to find signtool.exe tool at $(SignToolExePath)." Condition="!Exists('$(SignToolExePath)')"/>
    <Message Text="Signing assemblies..." Importance="high" />
    <ItemGroup>
      <FilesToSign Include="$(TargetDir)**\$(TargetName)*$(TargetExt)" />
      <FilesToSign Condition="'$(TargetExt)' != '.dll'" Include="$(TargetDir)**\$(TargetName)**.dll" />
    </ItemGroup>

    <!-- Sign all assemblies, using the default SPC from the user store -->
    <Exec Command="&quot;$(SignToolExePath)&quot; sign /a /q /fd $(SignHashAlgorithm) /tr $(TimestampServerUrl) &quot;%(FilesToSign.Identity)&quot;" />
    <Message Text="Files signed: @(FilesToSign)" />
  </Target>
</Project>
